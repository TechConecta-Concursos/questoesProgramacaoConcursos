/* Enunciado:
Considere o seguinte código em Java:

Map<String, String> cidades =
Map.of("11","Amapá","13","Itaubal","15","Cutias");
String texto =
  cidades.entrySet().stream().sorted(
     (e1, e2) -> e1.getKey().compareTo(e2.getKey()))
    .map(e-> Arrays.asList(e.getKey(), e.getValue()))
    .map(e-> String.join(", ", e))
    .collect(Collectors.joining(": "));

System.out.println(texto);

Ao ser executado com as importações necessárias, o código Java
acima imprime na saída padrão:

A) Cutias: 15, Amapá: 11, Itaubal: 13
B) Amapá: 11, Cutias: 15, Itaubal: 13
C) 11, Amapá: 13, Itaubal: 15, Cutias
D) 11: Amapá, 13: Itaubal, 15: Cutias
E) 15: Cutias, 13: Itaubal, 11: Amapá
*/

// Código para ser executado:
import java.util.*;
import java.util.stream.Collectors;

public class Main {
    public static void main(String[] args) {
        Map<String, String> cidades = Map.of("11","Amapá","13","Itaubal","15","Cutias");
        
        String texto = cidades.entrySet().stream()
            .sorted((e1, e2) -> e1.getKey().compareTo(e2.getKey()))
            .map(e-> Arrays.asList(e.getKey(), e.getValue()))
            .map(e-> String.join(", ", e))
            .collect(Collectors.joining(": "));
        
        System.out.println(texto);
    }
}

/* Comentário:
Para a resolução desse código, vamos analisar passo a passo:
1: Declaração do Mapa
Map<String, String> cidades = Map.of("11","Amapá","13","Itaubal","15","Cutias");
-O Map nada mais é do que um array turbinado de índices e valores. Cada par será o índice e valor, exatamente nessa ordem.
-Nesse caso específico, o Map.of mapeou os elementos da seguinte maneira:
  Índice: 11, Valor: Amapá
  Índice: 13, Valor: Itaubal
  Índice: 15, Valor: Cutias

2: Restante do código:
-entrySet(): Obtém um conjunto contendo as entradas do mapa (Set<Map.Entry<String, String>>).
-stream(): Cria um fluxo de dados para processar as entradas.
-sorted((e1, e2) -> e1.getKey().compareTo(e2.getKey())): Ordena as entradas do mapa pela chave em ordem crescente.
-map(e -> Arrays.asList(e.getKey(), e.getValue())): Transforma cada entrada em uma lista contendo a chave e o valor.
-map(e -> String.join(", ", e)): Concatena os elementos da lista (chave e valor) em uma string no formato "chave, valor".
-collect(Collectors.joining(": ")): Junta todas as strings geradas no fluxo, separando-as com ": ".

3: Resultado:
O que será mos trado em System.out.println(texto) será:
"11, Amapá: 13, Itaubal: 15, Cutias"
Resposta: Alternativa C
*/
